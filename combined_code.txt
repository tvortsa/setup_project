

================================================================================
// FILE: .gitignore
================================================================================

# Deno
.deno/
.vscode/.deno/
deno.lock

# Временные файлы
*.tmp
*.log
*.bak
.DS_Store
Thumbs.db

# Файлы комбинирования кода
combined_code*.txt

# Конфиденциальные данные
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Директории сборки
dist/
build/
out/

# Зависимости
node_modules/
vendor/

# IDE и редакторы
.vscode/*
!.vscode/extensions.json
!.vscode/settings.json
.idea/
*.sublime-project
*.sublime-workspace
.history/

# Специфичные для ОС файлы
.DS_Store
.directory
.Trash-*
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# Файлы конфигурации, которые могут содержать личные настройки
*.local.json
*.local.js


================================================================================
// FILE: deno.jsonc
================================================================================

{
  "name": "@tvortsa/setup-project",
  "version": "0.1.6",
  "exports": "./mod.js",
  "tasks": {
    // "run": "deno run -A mod.ts",
    "run": "deno run --allow-read --allow-write --allow-net mod.js",
    "test": "deno test -A",
    "setup": "deno run --allow-read --allow-write --allow-net mod.js"
  },
  "compilerOptions": {
    "allowJs": true,
    "checkJs": false
  },
  "imports": {
    "@std/fmt": "jsr:@std/fmt@^1.0.5",
    "@std/fs": "jsr:@std/fs@^1.0.13",
    "@tvortsa/setup-project": "jsr:@tvortsa/setup-project@^0.1.6",
    //"@tvortsa/setup-project": "jsr:@tvortsa/setup-project@^0.1.1",
    "jsr:@std/fs": "jsr:@std/fs@1.0.13",
    "jsr:@std/toml": "jsr:@std/toml@1.0.2",
    "jsr:@std/fmt/colors": "jsr:@std/fmt@1.0.5/colors"
  },
  "lock": false,
  "license": "MIT"
}

================================================================================
// FILE: jsr.json
================================================================================

{
  "name": "@tvortsa/setup_project",
  "version": "0.1.5",
  "exports": "./mod.js",
  "authors": ["tvortsa"],
  "description": "Модуль для создания структуры проекта по схеме из setup.toml",
  "repository": "https://github.com/tvortsa/setup_project",
  "license": "MIT"
}


================================================================================
// FILE: mod.js
================================================================================

import { ensureConfigFile } from './src/config.js';
import { setupProject } from './src/setup.js';
import { removeProjectStructure } from './src/remove.js';
import { displayProjectInfo } from './src/info.js';
import { displayModuleVersion } from './src/utils.js';
import grabStructure from "./src/grab_struct.js";
import { runMenu } from "./src/menu.js";
import {green} from '@std/fmt/colors';
import {update_code} from './src/update_code.js';
import combine_files from './src/combine_files.js';

async function main() {
  await ensureConfigFile();

  let continueRunning = true;
  while (continueRunning) {
    // const choice = await showMenuAndGetChoice();
    const choice = await runMenu();

    switch (choice) {
      case '1':
        await setupProject({ force: false, dryRun: false });
        break;
      case '2':
        await grabStructure();
        break;
      case '3':
        await removeProjectStructure({ dryRun: false, force: false });
        break;
      case '4':
        await displayProjectInfo();
        break;
      case '5': 
        await displayModuleVersion();
        break
      case '6': 
        await update_code();
        break
      case '7':
        await combine_files("combined_code.txt", ".");
        break;
      case '0':
        console.log(green('Выход из программы.'));
        continueRunning = false;
        break;
    }
  }
}

if (import.meta.main) {
  await main();
}


================================================================================
// FILE: README.md
================================================================================

# Setup-project модуль

помогает в создании файловой структуры разных проектов

опишите файловую структуру вашего проекта в файле setup.toml 
и запустите setup-project в папке с этим файлом.

вы также можете удалять папки и файлы указанные в setup.toml

делать снимок файловой системы текущей папки (игнорируя имена начинающихся на ".")
сохраняя такой снимок в файле grab_struct.toml

- Объединение файлов - выберите этот пункт меню и модуль прочтет вообще все файлы во всех папках вашего проекта и соберет их в единый текстовый файл. В файле combined_code_ignore.toml можно указать файлы и папки которые не должны быть включены в объединенный файл.

## Установка

для установки setup-project у вас должен быть установлен deno.js 2.0 +

```bash

deno install --global --allow-read --allow-write --allow-run --allow-env -r -f -n tvr_setup jsr:@tvortsa/setup-project

```

## Запуск

```bash

tvr_setup

```

если вы не положите в папку где запускаете tvr_setup файл setup.toml
со структурой вашего проекта, то будет создан дефолтный setup.toml

изучите структуру этого файла, чтобы создавать собственные файлы setup.toml
по-аналогии.

главных момента три:

1. ваш setup.toml должен начинаться строкой:

```toml
#tvr_setup
```

1. имена папок нужно писать в разделе

```toml
[folders]
```

1. имена файлов нужно писать в разделе

```toml
[files]
```

## Удаление созданной структуры

tvr_setup удаляет только файлы и папки которые записаны в setup.toml - файле

если вы не изменяли файл setup.toml после создания структуры папок с помощью tvr_setup,
то tvr_setup удалит все, что было им создано.


================================================================================
// FILE: setup.toml
================================================================================

#tvr_setup

[folders]
src = []

[files]
"README.md" = "# Проект создан с помощью setup-module"

"mod.js" = """
import { ensureConfigFile } from './src/config.js';
import { setupProject } from './src/setup.js';
import { removeProjectStructure } from './src/remove.js';
import { displayProjectInfo } from './src/info.js';
import { displayModuleVersion, showMenuAndGetChoice } from './src/utils.js';
import { green } from 'jsr:@std/fmt/colors';

async function main() {
  await ensureConfigFile();

  let continueRunning = true;
  while (continueRunning) {
    const choice = await showMenuAndGetChoice();

    switch (choice) {
      case '1':
        await setupProject({ force: false, dryRun: false });
        break;
      case '2':
        await removeProjectStructure({ dryRun: false, force: false });
        break;
      case '3':
        await displayProjectInfo();
        break;
      case '4':
        await displayModuleVersion();
        break;
      case '0':
        console.log(green('Выход из программы.'));
        continueRunning = false;
        break;
    }
  }
}

if (import.meta.main) {
  await main();
}
"""

"src/config.js" = """
import { parse } from 'jsr:@std/toml';
import { exists } from 'jsr:@std/fs';
import { green, yellow, red } from 'jsr:@std/fmt/colors';

export const configFileName = 'setup.toml';
export const defaultConfigPath = './templates/default.toml';

export async function ensureConfigFile() {
  try {
    if (await exists(configFileName)) {
      const configText = await Deno.readTextFile(configFileName);
      if (!configText.startsWith('#tvr_setup')) {
        console.log(yellow('[WARNING] setup.toml не содержит маркер "#tvr_setup".'));
        await Deno.rename(configFileName, '_setup.toml');
        console.log(yellow('[INFO] setup.toml переименован в _setup.toml.'));
        await createDefaultConfig();
      }
      console.log(green('Файл конфигурации уже существует.'));
      return false;
    } else {
      await createDefaultConfig();
      return true;
    }
  } catch (error) {
    console.error(red(`[ERROR] Ошибка при обработке setup.toml: ${error.message}`));
    throw error;
  }
}

async function createDefaultConfig() {
  const defaultConfig = await Deno.readTextFile(defaultConfigPath);
  await Deno.writeTextFile(configFileName, defaultConfig);
  console.log(green('[INFO] Создан setup.toml с настройками по умолчанию.'));
}

export async function loadConfig() {
  const configText = await Deno.readTextFile(configFileName);
  return parse(configText);
}
"""

"src/setup.js" = """
import { loadConfig } from './config.js';
import { createFolder, createFile } from './utils.js';
import { bold, green } from 'jsr:@std/fmt/colors';

export async function setupProject(options) {
  console.log(bold('- - - Генерация структуры проекта - - - '));
  const config = await loadConfig();

  for (const [baseFolder, subFolders] of Object.entries(config.folders)) {
    await createFolder(baseFolder, options.force, options.dryRun);
    for (const subFolder of subFolders) {
      await createFolder(`${baseFolder}/${subFolder}`, options.force, options.dryRun);
    }
  }

  for (const [filePath, content] of Object.entries(config.files || {})) {
    await createFile(filePath, content, options.force, options.dryRun);
  }
  console.log(green('- - - Генерация завершена - - - '));
}
"""

"src/remove.js" = """
import { loadConfig } from './config.js';
import { removePath } from './utils.js';
import { bold, red } from 'jsr:@std/fmt/colors';

export async function removeProjectStructure(options) {
  console.log(bold('- - - Удаление структуры проекта - - - '));
  try {
    const config = await loadConfig();

    for (const [baseFolder, subFolders] of Object.entries(config.folders)) {
      for (const subFolder of subFolders) {
        await removePath(`${baseFolder}/${subFolder}`, options.dryRun, options.force);
      }
      await removePath(baseFolder, options.dryRun, options.force);
    }

    for (const filePath of Object.keys(config.files || {})) {
      await removePath(filePath, options.dryRun, options.force);
    }
    console.log(red('- - - Удаление завершено - - - '));
  } catch (error) {
    console.error('Ошибка при удалении структуры:', error);
  }
}
"""

"src/info.js" = """
import { loadConfig } from './config.js';
import { bold, cyan } from 'jsr:@std/fmt/colors';

export async function displayProjectInfo() {
  console.log(bold('- - - Информация о проекте - - - '));
  const config = await loadConfig();

  console.log('--- Папки ---');
  for (const [baseFolder, subFolders] of Object.entries(config.folders)) {
    console.log(cyan(`- ${baseFolder}`));
    for (const subFolder of subFolders) {
      console.log(`  -- ${subFolder}`);
    }
  }

  if (config.files) {
    console.log('--- Файлы ---');
    for (const filePath of Object.keys(config.files)) {
      console.log(`- ${filePath}`);
    }
  }
}
"""

"src/utils.js" = """ 
import { green, red, yellow } from 'jsr:@std/fmt/colors';
export async function createFolder(path, force, dryRun) {
  try {
    if (dryRun) {
      console.log(`[DRY RUN] Would create folder: ${path}`);
    } else {
      await Deno.mkdir(path, { recursive: true });
      console.log(green(`Created folder: ${path}`));
    }
  } catch (error) {
    console.error(red(`Error creating folder: ${path}`), error);
  }
}

export async function createFile(path, content, force, dryRun) {
  if (dryRun) {
    console.log(`[DRY RUN] Would create file: ${path}`);
  } else {
    await Deno.writeTextFile(path, content);
    console.log(green(`Created file: ${path}`));
  }
}

export async function removePath(path, dryRun, force) {
  if (dryRun) {
    console.log(`[DRY RUN] Would remove: ${path}`);
  } else {
    await Deno.remove(path, { recursive: true });
    console.log(red(`Removed: ${path}`));
  }
}

export async function showMenuAndGetChoice() {
  console.log(yellow('Выберите действие:'));
  console.log('1. Создать структуру проекта');
  console.log('2. Удалить структуру проекта');
  console.log('3. Показать информацию о проекте');
  console.log('4. Показать версию модуля');
  console.log('0. Выйти');

  const buf = new Uint8Array(1024);
  const n = await Deno.stdin.read(buf);
  return n ? new TextDecoder().decode(buf.subarray(0, n)).trim() : '';
}

export function displayModuleVersion() {
  console.log('Версия модуля: 0.1.0');
}"""


================================================================================
// FILE: src\combine_files.js
================================================================================

import { walk } from "jsr:/@std/fs@^1.0.13/walk";
import { dirname, basename, extname, join } from "jsr:@std/path@1.0.8";
import { green, yellow, red } from 'jsr:@std/fmt/colors';
import { parse } from 'jsr:@std/toml';
import { exists } from 'jsr:@std/fs';

/**
 * Загружает настройки исключений из файла combined_code_ignore.toml
 * 
 * @param {string} ignore_file - Путь к файлу исключений
 * @returns {Promise<Object>} - Объект с настройками исключений
 */
async function load_ignore_settings(ignore_file = "combined_code_ignore.toml") {
  const default_settings = {
    directories: { exclude: ["node_modules", ".git", ".vscode", "dist", "build"] },
    files: { exclude: [".env", ".DS_Store"] },
    patterns: { exclude: ["combined_code*.txt", "*.log", "*.tmp"] },
    extensions: { exclude: [".exe", ".dll", ".jpg", ".png", ".gif", ".mp3", ".mp4", ".zip", ".rar", ".7z", ".pdf", ".lock"] }
  };

  try {
    if (await exists(ignore_file)) {
      const config_text = await Deno.readTextFile(ignore_file);
      const settings = parse(config_text);
      console.log(green(`Загружены настройки исключений из ${ignore_file}`));
      return {
        exclude_dirs: settings.directories?.exclude || default_settings.directories.exclude,
        exclude_files: settings.files?.exclude || default_settings.files.exclude,
        exclude_patterns: settings.patterns?.exclude || default_settings.patterns.exclude,
        exclude_extensions: settings.extensions?.exclude || default_settings.extensions.exclude
      };
    } else {
      console.log(yellow(`Файл ${ignore_file} не найден, используются настройки по умолчанию`));
      return {
        exclude_dirs: default_settings.directories.exclude,
        exclude_files: default_settings.files.exclude,
        exclude_patterns: default_settings.patterns.exclude,
        exclude_extensions: default_settings.extensions.exclude
      };
    }
  } catch (error) {
    console.error(red(`Ошибка при загрузке настроек исключений: ${error.message}`));
    return {
      exclude_dirs: default_settings.directories.exclude,
      exclude_files: default_settings.files.exclude,
      exclude_patterns: default_settings.patterns.exclude,
      exclude_extensions: default_settings.extensions.exclude
    };
  }
}

/**
 * Проверяет, соответствует ли файл шаблону с подстановочными знаками
 * 
 * @param {string} file_name - Имя файла для проверки
 * @param {string} pattern - Шаблон с подстановочными знаками (поддерживает только *)
 * @returns {boolean} - true, если файл соответствует шаблону
 */
function match_pattern(file_name, pattern) {
  // Преобразуем шаблон в регулярное выражение
  const regex_pattern = pattern
    .replace(/\./g, '\\.') // Экранируем точки
    .replace(/\*/g, '.*');  // Заменяем * на .* (любые символы)
  
  const regex = new RegExp(`^${regex_pattern}$`, 'i');
  return regex.test(file_name);
}

/**
 * Проверяет, должен ли файл быть исключен на основе настроек
 * 
 * @param {string} file_path - Путь к файлу
 * @param {Object} settings - Настройки исключений
 * @returns {boolean} - true, если файл должен быть исключен
 */
function should_exclude_file(file_path, settings) {
  const { exclude_dirs, exclude_files, exclude_patterns, exclude_extensions } = settings;
  const normalized_path = file_path.replace(/\\/g, '/');
  const file_name = basename(normalized_path);
  
  // Проверяем, находится ли файл в исключенной директории
  for (const dir of exclude_dirs) {
    // Проверяем разные варианты вхождения директории в путь
    if (
      normalized_path.includes(`/${dir}/`) || // внутри пути
      normalized_path.startsWith(`${dir}/`) || // в начале пути
      normalized_path === dir || // сам путь равен директории
      normalized_path.startsWith(`./${dir}/`) // относительный путь
    ) {
      console.log(yellow(`Исключен файл ${file_path} (находится в директории ${dir})`));
      return true;
    }
  }
  
  // Проверяем, соответствует ли имя файла списку исключений
  if (exclude_files.includes(file_name)) {
    console.log(yellow(`Исключен файл ${file_path} (в списке исключенных файлов)`));
    return true;
  }
  
  // Проверяем, соответствует ли файл шаблонам
  for (const pattern of exclude_patterns) {
    if (match_pattern(file_name, pattern)) {
      console.log(yellow(`Исключен файл ${file_path} (соответствует шаблону ${pattern})`));
      return true;
    }
  }
  
  // Проверяем расширение файла
  for (const ext of exclude_extensions) {
    if (normalized_path.toLowerCase().endsWith(ext.toLowerCase())) {
      console.log(yellow(`Исключен файл ${file_path} (имеет исключенное расширение ${ext})`));
      return true;
    }
  }
  
  return false;
}

/**
 * Генерирует уникальное имя файла с инкрементальной версией
 * 
 * @param {string} file_path - Исходный путь к файлу
 * @returns {Promise<string>} - Уникальный путь к файлу
 */
async function generate_unique_filename(file_path) {
  // Разбиваем путь на компоненты
  const dir = dirname(file_path);
  const file_name = basename(file_path, extname(file_path));
  const ext = extname(file_path);
  
  // Проверяем, существует ли файл
  if (!await exists(file_path)) {
    return file_path;
  }
  
  // Ищем номер версии в имени файла
  const version_match = file_name.match(/-(\d+)$/);
  let base_name = file_name;
  let version = 1;
  
  if (version_match) {
    // Если номер версии уже есть, увеличиваем его
    base_name = file_name.substring(0, version_match.index);
    version = parseInt(version_match[1], 10) + 1;
  }
  
  // Генерируем новое имя файла
  let new_file_path;
  do {
    const version_str = version.toString().padStart(2, '0');
    new_file_path = join(dir, `${base_name}-${version_str}${ext}`);
    version++;
  } while (await exists(new_file_path));
  
  return new_file_path;
}

/**
 * Рекурсивно читает все файлы в указанной директории и её поддиректориях,
 * объединяя их содержимое в один файл с маркерами начала каждого файла.
 * 
 * @param {string} output_file - Имя выходного файла
 * @param {string} dir - Директория для сканирования (по умолчанию текущая)
 * @param {string} ignore_file - Путь к файлу с настройками исключений
 * @returns {Promise<void>}
 */
export async function combine_files(
  output_file = "combined_code.txt", 
  dir = ".",
  ignore_file = "combined_code_ignore.toml"
) {
  let file_count = 0;
  let error_count = 0;
  let skipped_count = 0;
  
  console.log(green(`Начинаю сканирование директории: ${dir}`));
  
  try {
    // Загружаем настройки исключений
    const settings = await load_ignore_settings(ignore_file);
    
    // Создаем уникальное имя файла, если файл уже существует
    const unique_output_file = await generate_unique_filename(output_file);
    if (unique_output_file !== output_file) {
      console.log(yellow(`Файл ${output_file} уже существует, будет создан файл ${unique_output_file}`));
      output_file = unique_output_file;
    }
    
    // Создаем директорию для выходного файла, если она не существует
    await Deno.mkdir(dirname(output_file), { recursive: true }).catch(() => {});
    
    // Открываем файл для записи
    const file = await Deno.open(output_file, { write: true, create: true, truncate: true });
    
    // Включаем подробный вывод для отладки
    const verbose = true;
    
    // Рекурсивно обходим все файлы и директории
    for await (const entry of walk(dir, { includeDirs: false, includeFiles: true, followSymlinks: false })) {
      // Проверяем, должен ли файл быть исключен
      if (should_exclude_file(entry.path, settings)) {
        skipped_count++;
        continue;
      }
      
      try {
        // Читаем содержимое файла
        const content = await Deno.readTextFile(entry.path);
        
        // Создаем маркер начала файла
        const marker = `\n\n${"=".repeat(80)}\n// FILE: ${entry.path}\n${"=".repeat(80)}\n\n`;
        
        // Записываем маркер и содержимое файла
        await file.write(new TextEncoder().encode(marker + content));
        
        file_count++;
        
        // Выводим прогресс каждые 10 файлов
        if (file_count % 10 === 0) {
          console.log(green(`Обработано файлов: ${file_count}`));
        }
      } catch (error) {
        console.error(yellow(`Ошибка при чтении файла ${entry.path}: ${error.message}`));
        error_count++;
      }
    }
    
    // Закрываем файл
    file.close();
    
    console.log(green(`\nГотово! Обработано файлов: ${file_count}`));
    console.log(green(`Пропущено файлов: ${skipped_count}`));
    if (error_count > 0) {
      console.log(yellow(`Количество ошибок: ${error_count}`));
    }
    console.log(green(`Результат сохранен в файл: ${output_file}`));
  } catch (error) {
    console.error(red(`Произошла ошибка: ${error.message}`));
    throw error;
  }
}

export default combine_files;


================================================================================
// FILE: src\config.js
================================================================================

import { parse } from 'jsr:@std/toml';
import { exists } from 'jsr:@std/fs';
import { green, yellow, red } from 'jsr:@std/fmt/colors';

export const configFileName = 'setup.toml';
export const defaultConfigPath = './templates/default.toml';

export async function ensureConfigFile() {
  try {
    if (await exists(configFileName)) {
      const configText = await Deno.readTextFile(configFileName);
      if (!configText.startsWith('#tvr_setup')) {
        console.log(yellow('[WARNING] setup.toml не содержит маркер "#tvr_setup".'));
        await Deno.rename(configFileName, '_setup.toml');
        console.log(yellow('[INFO] setup.toml переименован в _setup.toml.'));
        await createDefaultConfig();
      }
      console.log(green('Файл конфигурации уже существует.'));
      return false;
    } else {
      await createDefaultConfig();
      return true;
    }
  } catch (error) {
    console.error(red(`[ERROR] Ошибка при обработке setup.toml: ${error.message}`));
    throw error;
  }
}

async function createDefaultConfig() {
  const defaultConfig = await Deno.readTextFile(defaultConfigPath);
  await Deno.writeTextFile(configFileName, defaultConfig);
  console.log(green('[INFO] Создан setup.toml с настройками по умолчанию.'));
}

export async function loadConfig() {
  const configText = await Deno.readTextFile(configFileName);
  return parse(configText);
}


================================================================================
// FILE: src\grab_struct.js
================================================================================

import { walk } from "@std/fs/walk";

async function grabStructure(outputFile = "grab_struct.toml", dir = ".") {
  const structure = { folders: {}, files: {} };

  for await (const entry of walk(dir, { includeDirs: true, includeFiles: true, followSymlinks: false })) {
    const parts = entry.path.split("/");
    if (parts.some(part => part.startsWith("."))) continue; // Игнорируем скрытые папки и файлы

    const parentDir = parts.slice(0, -1).join("/") || "root";

    if (entry.isDirectory) {
      if (!structure.folders[parentDir]) structure.folders[parentDir] = [];
      structure.folders[parentDir].push(entry.name);
    } else {
      structure.files[entry.path] = `""`;
    }
  }

  let tomlContent = "# Grabbed project structure\n\n[folders]\n";
  for (const [folder, subfolders] of Object.entries(structure.folders)) {
    tomlContent += `"${folder}" = [${subfolders.map(f => `"${f}"`).join(", ")}]\n`;
  }

  tomlContent += "\n[files]\n";
  for (const file of Object.keys(structure.files)) {
    tomlContent += `"${file}" = ""\n`;
  }

  await Deno.writeTextFile(outputFile, tomlContent);
  console.log(`Проектная структура сохранена в ${outputFile}`);
}

export default grabStructure;


================================================================================
// FILE: src\info.js
================================================================================

import { loadConfig } from './config.js';
import { bold, cyan } from 'jsr:@std/fmt/colors';

export async function displayProjectInfo() {
  console.log(bold('- - - Информация о проекте - - - '));
  const config = await loadConfig();

  console.log('--- Папки ---');
  for (const [baseFolder, subFolders] of Object.entries(config.folders)) {
    console.log(cyan(`- ${baseFolder}`));
    for (const subFolder of subFolders) {
      console.log(`  -- ${subFolder}`);
    }
  }

  if (config.files) {
    console.log('--- Файлы ---');
    for (const filePath of Object.keys(config.files)) {
      console.log(`- ${filePath}`);
    }
  }
}


================================================================================
// FILE: src\menu.js
================================================================================

// src/menu.js
import { Select } from "jsr:@cliffy/prompt@1.0.0-rc.7";

// ANSI-коды для управления стилем
// const BLINK_ON = "\x1b[5m"; // Мигание (если терминал поддерживает)
// const BLINK_OFF = "\x1b[25m";
// const RESET = "\x1b[0m";

export async function runMenu() {
  const choice = await Select.prompt({
    message: "Выберите действие:",
    options: [
      { name: "Создать структуру на основе setup.toml", value: "1" },
      { name: "Сграбить структуру папки запуска в grab_struct.toml", value: "2" },
      { name: "Удалить все элементы файловой системы по списку в setup.toml", value: "3" },
      { name: "Инфо о модуле", value: "4" },
      { name: "Инфо о версии", value: "5" },
      { name: "Обновить код", value: "6" },
      { name: "Объединить все файлы проекта в один текстовый файл", value: "7" },
      { name: "Выход", value: "0" }, // Выход всегда 0
    ],
    // Убираем pointer, так как он не работает как ожидалось
    // Вместо этого используем стандартный указатель cliffy
    // pointer: "\x1b[7m>\x1b[0m ", // Инверсия цветов для курсора
    pointer: "\x1b[1m>\x1b[0m " // для жирного текста
  });
//   return parseInt(choice, 10); // Возвращаем число от 0 до 5
  return choice; // Возвращаем число от 0 до 5
}

================================================================================
// FILE: src\remove.js
================================================================================

import { loadConfig } from './config.js';
import { removePath } from './utils.js';
import { bold, red } from 'jsr:@std/fmt/colors';

export async function removeProjectStructure(options) {
  console.log(bold('- - - Удаление структуры проекта - - - '));
  try {
    const config = await loadConfig();

    for (const [baseFolder, subFolders] of Object.entries(config.folders)) {
      for (const subFolder of subFolders) {
        await removePath(`${baseFolder}/${subFolder}`, options.dryRun, options.force);
      }
      await removePath(baseFolder, options.dryRun, options.force);
    }

    for (const filePath of Object.keys(config.files || {})) {
      await removePath(filePath, options.dryRun, options.force);
    }
    console.log(red('- - - Удаление завершено - - - '));
  } catch (error) {
    console.error('Ошибка при удалении структуры:', error);
  }
}


================================================================================
// FILE: src\setup.js
================================================================================

import { loadConfig } from './config.js';
import { createFolder, createFile } from './utils.js';
import { bold, green } from 'jsr:@std/fmt/colors';

export async function setupProject(options) {
  console.log(bold('- - - Генерация структуры проекта - - - '));
  const config = await loadConfig();

  for (const [baseFolder, subFolders] of Object.entries(config.folders)) {
    await createFolder(baseFolder, options.force, options.dryRun);
    for (const subFolder of subFolders) {
      await createFolder(`${baseFolder}/${subFolder}`, options.force, options.dryRun);
    }
  }

  for (const [filePath, content] of Object.entries(config.files || {})) {
    await createFile(filePath, content, options.force, options.dryRun);
  }
  console.log(green('- - - Генерация завершена - - - '));
}


================================================================================
// FILE: src\update_code.js
================================================================================

// update_code.js

/**
 * Чтение /updates/:
* Скрипт читает все .js файлы в папке ./updates/.
* Парсинг пути:
* Первая строка (//src/logger) указывает, куда записать файл.
* Сравнение и обновление:
* Если файл существует:
* Новые импорты добавляются в начало, если их нет в старом файле.
* Новые функции добавляются, существующие заменяются по имени (function имя()).
* Если файла нет, создаётся новый.
* Логи: Выводит [CREATE] или [UPDATE] для каждого файла.
* Пример обновления
* Файл в updates/example.js:
* javascript
* //src/logger/log_info.js
* import { something } from "somewhere";
* 
* function log_info(message) {
*   console.log(`[INFO] Updated: ${message}`);
* }
* 
* function new_feature() {
*   console.log("New!");
* }
* Если src/logger/log_info.js уже есть:
* Добавит новый импорт (если его нет).
* Заменит log_info на обновлённую версию.
* Добавит new_feature в конец.
* Если нет — создаст файл как есть..
 */
export async function update_code() {
    const updates_dir = "updates";
    try {
      for await (const entry of Deno.readDir(updates_dir)) {
        if (!entry.isFile || !entry.name.endsWith(".js")) continue;
  
        const file_path = `${updates_dir}/${entry.name}`;
        const new_content = await Deno.readTextFile(file_path);
        const lines = new_content.split("\n");
  
        // Парсим путь из первой строки (комментарий)
        const target_path = lines[0].startsWith("//") ? lines[0].slice(2).trim() : null;
        if (!target_path) {
          console.log(`[SKIP] No target path in ${file_path}`);
          continue;
        }
  
        const target_file = target_path.endsWith(".js") ? target_path : `${target_path}.js`;
        let existing_content = "";
        try {
          existing_content = await Deno.readTextFile(target_file);
        } catch (e) {
          // Если файла нет, создаём новый
          await Deno.writeTextFile(target_file, new_content);
          console.log(`[CREATE] ${target_file}`);
          continue;
        }
  
        // Разделяем на импорты и функции
        const new_lines = lines.slice(1); // Без комментария
        const new_imports = new_lines.filter(line => line.trim().startsWith("import"));
        const new_functions = new_lines.filter(line => !line.trim().startsWith("import") && line.trim());
  
        const old_lines = existing_content.split("\n");
        const old_imports = old_lines.filter(line => line.trim().startsWith("import"));
        const old_functions = old_lines.filter(line => !line.trim().startsWith("import") && line.trim());
  
        // Сравниваем и обновляем импорты
        const combined_imports = [...old_imports];
        for (const imp of new_imports) {
          if (!combined_imports.some(existing => existing.trim() === imp.trim())) {
            combined_imports.push(imp);
          }
        }
  
        // Сравниваем и обновляем функции
        const combined_functions = [...old_functions];
        for (const new_func of new_functions) {
          const new_func_name = new_func.match(/function\s+(\w+)/)?.[1];
          if (!new_func_name) continue;
  
          const old_func_idx = combined_functions.findIndex(line => line.match(/function\s+(\w+)/)?.[1] === new_func_name);
          if (old_func_idx >= 0) {
            // Заменяем существующую функцию
            combined_functions[old_func_idx] = new_func;
          } else {
            // Добавляем новую функцию
            combined_functions.push(new_func);
          }
        }
  
        // Собираем обновлённый код
        const updated_content = [...combined_imports, "", ...combined_functions].join("\n");
        await Deno.writeTextFile(target_file, updated_content);
        console.log(`[UPDATE] ${target_file}`);
      }
    } catch (e) {
      console.error("[ERROR]", e.message);
    }
  }

================================================================================
// FILE: src\utils.js
================================================================================

 
import { green, red, yellow } from 'jsr:@std/fmt/colors';
export async function createFolder(path, force, dryRun) {
  try {
    if (dryRun) {
      console.log(`[DRY RUN] Would create folder: ${path}`);
    } else {
      await Deno.mkdir(path, { recursive: true });
      console.log(green(`Created folder: ${path}`));
    }
  } catch (error) {
    console.error(red(`Error creating folder: ${path}`), error);
  }
}

export async function createFile(path, content, force, dryRun) {
  if (dryRun) {
    console.log(`[DRY RUN] Would create file: ${path}`);
  } else {
    await Deno.writeTextFile(path, content);
    console.log(green(`Created file: ${path}`));
  }
}

export async function removePath(path, dryRun, force) {
  if (dryRun) {
    console.log(`[DRY RUN] Would remove: ${path}`);
  } else {
    await Deno.remove(path, { recursive: true });
    console.log(red(`Removed: ${path}`));
  }
}

export async function showMenuAndGetChoice() {
  console.log(yellow('Выберите действие:'));
  console.log('1. Создать структуру проекта');
  console.log('2. Скопировать структуру текущей папки');
  console.log('3. Удалить структуру проекта');
  console.log('4. Показать информацию о проекте');
  console.log('5. Показать версию модуля');
  console.log('0. Выйти');

  const buf = new Uint8Array(1024);
  const n = await Deno.stdin.read(buf);
  return n ? new TextDecoder().decode(buf.subarray(0, n)).trim() : '';
}

export function displayModuleVersion() {
  console.log('Версия модуля: 0.1.5');
}

================================================================================
// FILE: test_combine.js
================================================================================

import { combine_files } from "./src/combine_files.js";

// Запускаем функцию с явным указанием файла игнора
await combine_files("combined_code_test.txt", ".", "combined_code_ignore.toml");
