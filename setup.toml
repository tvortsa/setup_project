#tvr_setup

[folders]
src = []

[files]
"README.md" = "# Проект создан с помощью setup-module"

"mod.js" = """
import { ensureConfigFile } from './src/config.js';
import { setupProject } from './src/setup.js';
import { removeProjectStructure } from './src/remove.js';
import { displayProjectInfo } from './src/info.js';
import { displayModuleVersion, showMenuAndGetChoice } from './src/utils.js';
import { green } from 'jsr:@std/fmt/colors';

async function main() {
  await ensureConfigFile();

  let continueRunning = true;
  while (continueRunning) {
    const choice = await showMenuAndGetChoice();

    switch (choice) {
      case '1':
        await setupProject({ force: false, dryRun: false });
        break;
      case '2':
        await removeProjectStructure({ dryRun: false, force: false });
        break;
      case '3':
        await displayProjectInfo();
        break;
      case '4':
        await displayModuleVersion();
        break;
      case '0':
        console.log(green('Выход из программы.'));
        continueRunning = false;
        break;
    }
  }
}

if (import.meta.main) {
  await main();
}
"""

"src/config.js" = """
import { parse } from 'jsr:@std/toml';
import { exists } from 'jsr:@std/fs';
import { green, yellow, red } from 'jsr:@std/fmt/colors';

export const configFileName = 'setup.toml';
export const defaultConfigPath = './templates/default.toml';

export async function ensureConfigFile() {
  try {
    if (await exists(configFileName)) {
      const configText = await Deno.readTextFile(configFileName);
      if (!configText.startsWith('#tvr_setup')) {
        console.log(yellow('[WARNING] setup.toml не содержит маркер "#tvr_setup".'));
        await Deno.rename(configFileName, '_setup.toml');
        console.log(yellow('[INFO] setup.toml переименован в _setup.toml.'));
        await createDefaultConfig();
      }
      console.log(green('Файл конфигурации уже существует.'));
      return false;
    } else {
      await createDefaultConfig();
      return true;
    }
  } catch (error) {
    console.error(red(`[ERROR] Ошибка при обработке setup.toml: ${error.message}`));
    throw error;
  }
}

async function createDefaultConfig() {
  const defaultConfig = await Deno.readTextFile(defaultConfigPath);
  await Deno.writeTextFile(configFileName, defaultConfig);
  console.log(green('[INFO] Создан setup.toml с настройками по умолчанию.'));
}

export async function loadConfig() {
  const configText = await Deno.readTextFile(configFileName);
  return parse(configText);
}
"""

"src/setup.js" = """
import { loadConfig } from './config.js';
import { createFolder, createFile } from './utils.js';
import { bold, green } from 'jsr:@std/fmt/colors';

export async function setupProject(options) {
  console.log(bold('- - - Генерация структуры проекта - - - '));
  const config = await loadConfig();

  for (const [baseFolder, subFolders] of Object.entries(config.folders)) {
    await createFolder(baseFolder, options.force, options.dryRun);
    for (const subFolder of subFolders) {
      await createFolder(`${baseFolder}/${subFolder}`, options.force, options.dryRun);
    }
  }

  for (const [filePath, content] of Object.entries(config.files || {})) {
    await createFile(filePath, content, options.force, options.dryRun);
  }
  console.log(green('- - - Генерация завершена - - - '));
}
"""

"src/remove.js" = """
import { loadConfig } from './config.js';
import { removePath } from './utils.js';
import { bold, red } from 'jsr:@std/fmt/colors';

export async function removeProjectStructure(options) {
  console.log(bold('- - - Удаление структуры проекта - - - '));
  try {
    const config = await loadConfig();

    for (const [baseFolder, subFolders] of Object.entries(config.folders)) {
      for (const subFolder of subFolders) {
        await removePath(`${baseFolder}/${subFolder}`, options.dryRun, options.force);
      }
      await removePath(baseFolder, options.dryRun, options.force);
    }

    for (const filePath of Object.keys(config.files || {})) {
      await removePath(filePath, options.dryRun, options.force);
    }
    console.log(red('- - - Удаление завершено - - - '));
  } catch (error) {
    console.error('Ошибка при удалении структуры:', error);
  }
}
"""

"src/info.js" = """
import { loadConfig } from './config.js';
import { bold, cyan } from 'jsr:@std/fmt/colors';

export async function displayProjectInfo() {
  console.log(bold('- - - Информация о проекте - - - '));
  const config = await loadConfig();

  console.log('--- Папки ---');
  for (const [baseFolder, subFolders] of Object.entries(config.folders)) {
    console.log(cyan(`- ${baseFolder}`));
    for (const subFolder of subFolders) {
      console.log(`  -- ${subFolder}`);
    }
  }

  if (config.files) {
    console.log('--- Файлы ---');
    for (const filePath of Object.keys(config.files)) {
      console.log(`- ${filePath}`);
    }
  }
}
"""

"src/utils.js" = """ 
import { green, red, yellow } from 'jsr:@std/fmt/colors';
export async function createFolder(path, force, dryRun) {
  try {
    if (dryRun) {
      console.log(`[DRY RUN] Would create folder: ${path}`);
    } else {
      await Deno.mkdir(path, { recursive: true });
      console.log(green(`Created folder: ${path}`));
    }
  } catch (error) {
    console.error(red(`Error creating folder: ${path}`), error);
  }
}

export async function createFile(path, content, force, dryRun) {
  if (dryRun) {
    console.log(`[DRY RUN] Would create file: ${path}`);
  } else {
    await Deno.writeTextFile(path, content);
    console.log(green(`Created file: ${path}`));
  }
}

export async function removePath(path, dryRun, force) {
  if (dryRun) {
    console.log(`[DRY RUN] Would remove: ${path}`);
  } else {
    await Deno.remove(path, { recursive: true });
    console.log(red(`Removed: ${path}`));
  }
}

export async function showMenuAndGetChoice() {
  console.log(yellow('Выберите действие:'));
  console.log('1. Создать структуру проекта');
  console.log('2. Удалить структуру проекта');
  console.log('3. Показать информацию о проекте');
  console.log('4. Показать версию модуля');
  console.log('0. Выйти');

  const buf = new Uint8Array(1024);
  const n = await Deno.stdin.read(buf);
  return n ? new TextDecoder().decode(buf.subarray(0, n)).trim() : '';
}

export function displayModuleVersion() {
  console.log('Версия модуля: 0.1.0');
}"""
