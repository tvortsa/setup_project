import { parse } from "jsr:@std/toml@1.0.2";

/**
 * –ß–∏—Ç–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ setup.toml –∏ —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
 * @param {string} configPath - –ü—É—Ç—å –∫ setup.toml
 */
export async function createStructureFromConfig(configPath) {
    const config = {
        folders: {
          "src": ["core", "engine", "webui"],
          "public": [],
          "config": [],
          "assets": []
        }
      };
      
      for (const baseFolder in config.folders) {
        const subFolders = config.folders[baseFolder] || []; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π undefined
        for (const subFolder of subFolders) {
          console.log(`Creating: ${baseFolder}/${subFolder}`);
        }
      }
      
    try {
        const configText = await Deno.readTextFile(configPath);
        const config = parse(configText);

        if (config.folders) {
            for (const baseFolder in config.folders) {
                for (const subFolder of config.folders[baseFolder]) {
                    const path = `${baseFolder}/${subFolder}`;
                    await Deno.mkdir(path, { recursive: true });
                    console.log(`üìÇ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${path}`);
                }
            }
        }

        if (config.files) {
            for (const [filePath, content] of Object.entries(config.files)) {
                await Deno.writeTextFile(filePath, String(content));
                console.log(`üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${filePath}`);
            }
        }

        console.log("\n‚úÖ –§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:", err);
    }
}
